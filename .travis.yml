language: minimal

dist: focal

sudo: required

addons:
  apt:
    packages:
      - bc
      - bison
      - build-essential
      - ccache
      - curl
      - flex
      - g++-multilib
      - gcc-multilib
      - git
      - git-lfs
      - gnupg
      - gperf
      - imagemagick
      - lib32ncurses5-dev
      - lib32readline-dev
      - lib32z1-dev
      - liblz4-tool
      - libncurses5
      - libncurses5-dev
      - libsdl1.2-dev
      - libssl-dev
      - libwxgtk3.0-gtk3-dev
      - libxml2
      - libxml2-utils
      - lzop
      - pngcrush
      - rsync
      - schedtool
      - squashfs-tools
      - xsltproc
      - zip
      - zlib1g-dev
      - jq

before_install:
  # Install repo tool manually
  - curl https://storage.googleapis.com/git-repo-downloads/repo > ~/bin/repo
  - chmod a+x ~/bin/repo
  - export PATH=~/bin:$PATH
  
  # Setup git-lfs
  - git lfs install
  
install:
  - git config --global color.ui true
  - git config --global user.email "tisrijon9@gmail.com"
  - git config --global user.name "TISnoob"
  # Initialize the repo for crDroid 14.0 with Git LFS
  - repo init -u https://github.com/crdroidandroid/android.git -b 14.0 --git-lfs
  # Sync the repo
  - repo sync -j$(nproc) --force-sync

before_script:
  # Setup ccache
  - export USE_CCACHE=1
  - ccache -M 200G

script:
  # Start the build process
  - . build/envsetup.sh
  - lunch lineage_lancelot-userdebug
  - mka bacon

after_success:
  - echo "Build completed successfully!"

  # Define variables
  - REPO="TISnoob/rombuild"
  - GITHUB_TAG="v$(date +%Y%m%d%H%M%S)"
  - GITHUB_RELEASE_NAME="ROM Release $(date +%Y-%m-%d)"
  - GITHUB_RELEASE_BODY="This release contains the latest custom ROM build."

  # Create GitHub release via API
  - echo "Creating GitHub release..."
  - RESPONSE=$(curl -s -X POST -H "Authorization: token $GITHUB_TOKEN" -d "{\"tag_name\": \"$GITHUB_TAG\", \"name\": \"$GITHUB_RELEASE_NAME\", \"body\": \"$GITHUB_RELEASE_BODY\", \"draft\": false, \"prerelease\": false}" https://api.github.com/repos/$REPO/releases)
  
  # Extract release ID from the response
  - RELEASE_ID=$(echo $RESPONSE | jq -r '.id')
  - if [ "$RELEASE_ID" == "null" ] || [ -z "$RELEASE_ID" ]; then
      echo "Failed to create release or parse release ID!";
      exit 1;
    fi

  # Find and upload all ROM files (e.g., zip, img, tar)
  - echo "Searching for ROM files to upload..."
  - ROM_FILES=$(find $PWD -type f \( -name "*.zip" -o -name "*.img" -o -name "*.tar" \))
  - if [ -z "$ROM_FILES" ]; then
      echo "No ROM files found!";
      exit 0;
    fi

  # Upload each found file as an asset to the GitHub release
  - for FILE in $ROM_FILES; do
      echo "Uploading $FILE to GitHub release...";
      UPLOAD_URL="https://uploads.github.com/repos/$REPO/releases/$RELEASE_ID/assets?name=$(basename $FILE)"
      curl -s -H "Authorization: token $GITHUB_TOKEN" -H "Content-Type: application/octet-stream" --data-binary @$FILE $UPLOAD_URL;
    done

cache:
  directories:
    - $HOME/.ccache
    - $HOME/.repo

notifications:
  email:
    recipients:
      - tisrijon9@gmail.com
    on_success: always
    on_failure: always
