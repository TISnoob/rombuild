os: linux
dist: bionic
language: generic
sudo: required
git:
  depth: 1
addons:
  apt:
    update:
      - true
services:
  - docker
before_install:
  # Pull the Docker image for the build environment
  - docker pull fr3akyphantom/android-builder:latest
before_script:
  # Set up directories for building
  - cd $HOME
  - mkdir -p android/rom
  # Clone the repo tool if it's not included in your Docker image
  - git clone https://android.googlesource.com/tools/repo
  - export PATH=$PATH:$HOME/repo
  # Initialize repo with the manifest URL for your ROM
  - repo init -u https://github.com/crdroidandroid/android.git -b 14.0 --git-lfs
script:
  # Run the build environmnside Docker
  - |
    docker run --rm -i -e USER_ID=$(id -u) -e GROUP_ID=$(id -g) \
      -v "$(pwd)/android/rom:/home/builder/rom/:rw,z" \
      -v "${HOME}/.ccache:/srv/ccache:rw,z" \
      fr3akyphantom/android-builder bash << EOF
    # Navigate to the ROM source directory
    cd /home/builder/rom
    # Sync the source code
    repo sync -j$(nproc --all)
    # Source the environment setup script
    source build/envsetup.sh
    # Choose build target (e.g., "aosp_arm-eng")
    lunch aosp_device-eng
    # Start the build process
    make -j$(nproc --all) otapackage
    exit
    EOF
after_success:
  # Copy build artifacts to a specific directory
  - cp $HOME/android/rom/out/target/product/device/* $HOME/android/rom/
  # Optionally upload build artifacts
  - cd $HOME/android/rom/
  # Uncomment if you want to use file.io or another file sharing service
  # - curl -s --upload-file *.zip https://transfer.sh/ && echo ""
deploy:
  skip_cleanup: true
  provider: releases
  api_key: $GitOAUTHToken
  file_glob: true
  file: $HOME/android/rom/*
  on:
    tags: false
    repo: yourusername/your-rom-repo
    branch: main
branches:
  only:
    - main
  except:
    - /^(?i:untagged)-.*$/
    - /^v\d+\.\d+(\.\d+)?(-\S*)?$/
